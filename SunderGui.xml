<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE MudletPackage>
<MudletPackage version="1.001">
	<TriggerPackage>
		<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
			<name>Gui</name>
			<script></script>
			<triggerType>0</triggerType>
			<conditonLineDelta>0</conditonLineDelta>
			<mStayOpen>0</mStayOpen>
			<mCommand></mCommand>
			<packageName></packageName>
			<mFgColor>#ff0000</mFgColor>
			<mBgColor>#ffff00</mBgColor>
			<mSoundFile></mSoundFile>
			<colorTriggerFgColor>#000000</colorTriggerFgColor>
			<colorTriggerBgColor>#000000</colorTriggerBgColor>
			<regexCodeList />
			<regexCodePropertyList />
			<TriggerGroup isActive="yes" isFolder="yes" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
				<name>Chat</name>
				<script></script>
				<triggerType>0</triggerType>
				<conditonLineDelta>0</conditonLineDelta>
				<mStayOpen>0</mStayOpen>
				<mCommand></mCommand>
				<packageName></packageName>
				<mFgColor>#ff0000</mFgColor>
				<mBgColor>#ffff00</mBgColor>
				<mSoundFile></mSoundFile>
				<colorTriggerFgColor>#000000</colorTriggerFgColor>
				<colorTriggerBgColor>#000000</colorTriggerBgColor>
				<regexCodeList />
				<regexCodePropertyList />
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="yes" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Deathsight</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append("Misc")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#5500ff</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#00b300</colorTriggerFgColor>
					<colorTriggerBgColor>#800080</colorTriggerBgColor>
					<regexCodeList>
						<string>FG6BG12</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>6</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>leylines</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append("Misc")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff007f</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>A palpitating tremor resonates from the leylines as a lesser focal point is tapped for its energy.</string>
						<string>A spicy, ashen smell wafts up your nose and you look up to notice a fire signal eddying up into the sky; an event within the ruins has been signalled.</string>
						<string>A spicy, ashen smell wafts up your nose and you look up to notice a fire signal eddying up into the sky; an event within the ruins will begin within fifteen minutes.</string>
						<string>The spicy, ashen smell that had been lingering begins to subside and you know the signal fire has been extinguished; there is five minutes before the event begins in the ruins.</string>
						<string>A spicy, ashen smell touches your nose, the scent familiar to the incense used in the Ophidian Ruins, signalling an event within them has been signalled.</string>
						<string>A spicy, ashen smell touches your nose, the scent familiar to the incense used in the Ophidian Ruins, signalling an event within them will begin within fifteen minutes.</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
						<integer>3</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Signs</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append("Local")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>You sign out: </string>
						<string>^(\w+) signs</string>
						<string>^Subtle movements within (\w+)'s? actions convey the message:</string>
						<string>Subtle movements within your actions conveys to others:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>2</integer>
						<integer>1</integer>
						<integer>1</integer>
						<integer>2</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="yes" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>lost item</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append("Misc")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#00aaff</mFgColor>
					<mBgColor>#000000</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^You feel a sense of loss as .+ blinks out of existence\.$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="no" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>generic capture</name>
					<script>local secondary_capture_needed = {"A needling horncall airs a whining note, prefacing some grand announcement."}
local ignores = {"The shrunken head in your inventory sneezes violently",}

if snd.gui.enabled then

  for _, ignore in ipairs(ignores) do
  	if matches[1]:find(ignore) then return false end
  end

  if snd.last_channel == "Web" then
    if matches[1]:find("Web") then
      demonnic.chat:append("Web")
      disableTrigger("generic capture")
    end
  elseif string.find(matches[1]:lower(), snd.who_is_talking:lower()) or snd.who_is_talking == gmcp.Char.Status.name then
    demonnic.chat:append(snd.last_channel or "Misc")
    disableTrigger("generic capture")
  elseif snd.we_saw_a_thot then
    demonnic.chat:append("Local")
    snd.we_saw_a_thot = false
    disableTrigger("generic capture")
  elseif snd.last_channel == "Tells" then
    demonnic.chat:append("Tells")
    disableTrigger("generic capture")
  end

end

if table.isMember(secondary_capture_needed, matches[1]) then
  enableTrigger("secondary capture")
end

</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.+)$</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="yes" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>secondary capture</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append(snd.last_channel or "Misc")
end

disableTrigger("secondary capture")</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>0</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(.+)$</string>
						<string></string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>3</integer>
						<integer>7</integer>
					</regexCodePropertyList>
				</Trigger>
				<Trigger isActive="yes" isFolder="no" isTempTrigger="no" isMultiline="no" isPerlSlashGOption="no" isColorizerTrigger="no" isFilterTrigger="no" isSoundTrigger="no" isColorTrigger="no" isColorTriggerFg="no" isColorTriggerBg="no">
					<name>Thought trigger</name>
					<script>if snd.gui.enabled then
  demonnic.chat:append("Local")
  snd.last_channel = "Local"
  snd.we_saw_a_thot = true
  enableTrigger("generic capture")
end</script>
					<triggerType>0</triggerType>
					<conditonLineDelta>1</conditonLineDelta>
					<mStayOpen>0</mStayOpen>
					<mCommand></mCommand>
					<packageName></packageName>
					<mFgColor>#ff0000</mFgColor>
					<mBgColor>#ffff00</mBgColor>
					<mSoundFile></mSoundFile>
					<colorTriggerFgColor>#000000</colorTriggerFgColor>
					<colorTriggerBgColor>#000000</colorTriggerBgColor>
					<regexCodeList>
						<string>^(\w+) just thought\:</string>
					</regexCodeList>
					<regexCodePropertyList>
						<integer>1</integer>
					</regexCodePropertyList>
				</Trigger>
			</TriggerGroup>
		</TriggerGroup>
	</TriggerPackage>
	<TimerPackage />
	<AliasPackage>
		<AliasGroup isActive="yes" isFolder="yes">
			<name>GUI</name>
			<script></script>
			<command></command>
			<packageName></packageName>
			<regex></regex>
			<AliasGroup isActive="yes" isFolder="yes">
				<name>Chat</name>
				<script></script>
				<command></command>
				<packageName></packageName>
				<regex></regex>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Shared</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Reset chasing</name>
						<script>demonnic.chaser:reset()</script>
						<command></command>
						<packageName></packageName>
						<regex>^chaseres$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>Debug</name>
						<script>if matches[2] then
  demonnic:listCategories()
else
  demonnic:toggleDebug()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^debug(?: (list))?$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>debug categories</name>
						<script>if matches[2] then
  demonnic:watchCategory( matches[2] )
else
  demonnic:listCategories()
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^debugc(?: (.*))?$</regex>
					</Alias>
				</AliasGroup>
				<AliasGroup isActive="yes" isFolder="yes">
					<name>Tabbed Chat</name>
					<script></script>
					<command></command>
					<packageName></packageName>
					<regex></regex>
					<Alias isActive="yes" isFolder="no">
						<name>Toggle blinking (temporary change)</name>
						<script>if demonnic.chat.config.blink then
  demonnic.chat.config.blink = false
  demonnic.chat.tabsToBlink = {}
  demonnic:echo("Blinking temporarily turned &lt;red&gt;off&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to false in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
else
  demonnic.chat.config.blink = true
  demonnic.chat:blink()
  demonnic:echo("Blinking temporarily turned &lt;red&gt;on&lt;grey&gt;. It will reset if you edit your tabbed chat configuration, or close and reopen mudlet. To make it permanent, change demonnic.chat.config.blink to true in \"Demonnic-&gt;Tabbed Chat-&gt;Configuration options\" under scripts\n")
end</script>
						<command></command>
						<packageName></packageName>
						<regex>^dblink$</regex>
					</Alias>
					<Alias isActive="yes" isFolder="no">
						<name>fixChat</name>
						<script>local currentsetting = demonnic.chat.config.location
local newsetting = ""
if currentsetting == "topright" then 
  newsetting = "bottomleft" 
elseif currentsetting == "topleft" then
  newsetting = "bottomright"
elseif currentsetting == "bottomleft" then
  newsetting = "topright"
elseif currentsetting == "bottomright" then
  newsetting = "topleft"
end

demonnic.chat.config.location = newsetting
demonnic.chat:create()
demonnic.chat.config.location = currentsetting
demonnic.chat:create()</script>
						<command></command>
						<packageName></packageName>
						<regex>^fixchat$</regex>
					</Alias>
				</AliasGroup>
			</AliasGroup>
		</AliasGroup>
	</AliasPackage>
	<ActionPackage />
	<ScriptPackage>
		<ScriptGroup isActive="yes" isFolder="yes">
			<name>GUI</name>
			<packageName></packageName>
			<script></script>
			<eventHandlerList />
			<Script isActive="yes" isFolder="no">
				<name>setup</name>
				<packageName></packageName>
				<script>local windowwidth, windowheight = getMainWindowSize()
alteredwindowwidth = math.ceil(windowwidth*.08)
snd = snd or {}
snd.gui = {
  enabled = true,
  height = windowheight,
  width_right = 400,
  width_left = alteredwindowwidth,
 
}

if snd.gui.enabled then
    setBorderLeft(snd.gui.width_left);
    --setBorderRight(snd.gui.width_right); 
    
    yatcoContainer = yatcoContainer or Adjustable.Container:new({
        name = "yatcoContainer", x = -snd.gui.width_right, y = 0,
        width = snd.gui.width_right, height = "50%",
    });
    
    mapContainer = mapContainer or Adjustable.Container:new({
        name = "mapContainer", x = -snd.gui.width_right, y = windowheight/2,
        width = snd.gui.width_right, height = "50%",
    });

    leftContainer = Geyser.Container:new({
    		name = "leftContainer", x = 1, y = 0,
    		width = snd.gui.width_left-5, height = "100%",
    });
else
  setBorderLeft(0)
  setBorderRight(0)

end</script>
				<eventHandlerList />
			</Script>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Left</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>vitals</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  vitals = Geyser.Label:new({
   name = "vitals",
   x = 0, y = 0,
   width = "100%", height = "4%",
   fgColor = "white",
  }, leftContainer);
  vitals:setFontSize(11)
end
</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>wielding</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  wielding = Geyser.Label:new({
   name = "wielding",
   x = 0, y = "4%",
   width = "100%", height = "3%",
   color = "SteelBlue", fgColor = "white",
   message = [[wielding]],
  }, leftContainer);
  wielding:setFontSize(9)
end

function updatedWielded()

  if snd.wielded.left.name == "" and snd.wielded.right.name == "" then
    wielding:echo("&lt;center&gt;empty hands&lt;/center&gt;")
  else
    local string = ""
    if snd.wielded.left.name ~= "" then
      string = string .. "&lt;center&gt;" .. snd.weaponType(snd.wielded.left.name) .. "&lt;/center&gt;"
    end
    if snd.wielded.right.name ~= "" then
      string = string .. "&lt;center&gt;" .. snd.weaponType(snd.wielded.right.name) .. "&lt;/center&gt;"
    end
    wielding:echo(string)
  end

end
registerAnonymousEventHandler("sunder_item_update","updatedWielded")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>time_update</name>
					<packageName></packageName>
					<script>  if snd.gui.enabled then
  time = Geyser.Label:new({
   name = "time",
   x = 0, y = "7%",
   width = "100%", height = "1.75%",
   color = "black", fgColor = "white",
   message = [[time]],
  }, leftContainer);
  time:setFontSize(7.45)
end
registerAnonymousEventHandler("sunder_login","time_update")
function time_update()
  if snd.gui.enabled then
    sendGMCP("IRE.Time.Request")
    
    local d = gmcp.IRE.Time.List.day
    local m = gmcp.IRE.Time.List.month
    local y = gmcp.IRE.Time.List.year
    
    local t = gmcp.IRE.Time.List.time 
    	if t:find("late night, approaching midnight") then
    		time:setFontSize(8)
     		t = "Late night"
    	elseif t:find("It is deep night in Aetolia") then
    		t = "Almost midnight"
    		time:setFontSize(7.45)
    	elseif t:find("It is deepest midnight.") then
    		t = "Midnight"
    		time:setFontSize(8)
    	elseif t:find("It is the middle of the night in Aetolia") then
    		t = "After midnight"
    		time:setFontSize( 7.45)
    	elseif t:find("early morning in Aetolia") then
    		t = "Early morning"
    		time:setFontSize(7.45)
    	elseif t:find("approaching dawn.") then
    		t = "Almost dawn"
    		time:setFontSize(7.45)
    	elseif t:find("It is dawn.") then
    		t = "Dawn"
    		time:setFontSize(8)
    	elseif t:find("It's mid-") then
    		t = "Mid-morning"
    		time:setFontSize(8)
    	elseif t:find("approaching noon") then
    		t = "Almost noon"
    		time:setFontSize(7.45)
    	elseif t:find("exactly noon") then
    		t = "Hiiiigh noooon"
    		time:setFontSize(7.45)
    	elseif t:find("early afternoon") then
    		t = "Early afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("It is late afternoon in Aetolia") then
    		t = "Late afternoon"
    		time:setFontSize(7.45)
    	elseif t:find("dusk in Aet") then
    		t = "Dusk"
    		time:setFontSize(8)
    	elseif t:find("Twilight has overtaken the light") then
    		t = "Early evening"
    		time:setFontSize(7.45)
    	else 
    		--This should only come about if they add a new time to the cycle.
    	end
    
    time:echo("&lt;center&gt;"..t.." "..m.."/"..d.."/"..y.."&lt;/center&gt;")
  end
end</script>
					<eventHandlerList>
						<string>gmcp.IRE.Time.Update</string>
					</eventHandlerList>
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>my status</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  mystatus = Geyser.Label:new({
   name = "mystatus",
   x = 0, y = "9%",
   width = "35%", height = "10.5%",
   color = "slate_gray", fgColor = "white",
   message = [[mystatus]],
  }, leftContainer);
  mystatus:setFontSize(9)
  	mystatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mystatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;&lt;center&gt;prone&lt;/center&gt;")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>my limbs</name>
					<packageName></packageName>
					<script> if snd.gui.enabled then
  mylimbs = Geyser.Label:new({
   name = "mylimbs",
   x = 0, y = "19%",
   width = "35%", height = "10%",
   color = "dim_gray", fgColor = "white",
   message = [[mylimbs]],
  }, leftContainer);
  mylimbs:setFontSize(9)
  	mylimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkCyan;
  		
  	]])
  mylimbs:echo("&lt;center&gt;0&lt;/center&gt;&lt;center&gt;/|\\&lt;/center&gt;&lt;center&gt;/\\&lt;/center&gt;")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>my affs</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  myaffs = Geyser.Label:new({
   name = "myaffs",
   x = "35%", y = "9%",
   width = "65%", height = "20%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[my affs]],
  }, leftContainer);
  myaffs:setFontSize(9)
    myaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkCyan;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>enemy status</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  estatus = Geyser.Label:new({
   name = "estatus",
   x = 0, y = "30%",
   width = "35%", height = "11.75%",
   color = "slate_gray", fgColor = "white",
   message = [[estatus]],
  }, leftContainer);
  estatus:setFontSize(9)
  	estatus:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  estatus:echo("&lt;center&gt;".."PASN".."&lt;/center&gt;&lt;center&gt;prone&lt;/center&gt;")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>enemy limbs</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  elimbs = Geyser.Label:new({
   name = "elimbs",
   x = 0, y = "41.5%",
   width = "35%", height = "11.5%",
   color = "black", fgColor = "white",
   message = [[elimbs]],
  }, leftContainer);
  elimbs:setFontSize(9)
  	elimbs:setStyleSheet([[
  		border-width: 3px;
  		border-style: solid;
  		border-color: DarkSlateBlue;
  		
  	]])
  --border-radius: 10px;
  elimbs:echo("&lt;center&gt;0&lt;/center&gt;&lt;center&gt;/|\\&lt;/center&gt;&lt;center&gt;/\\&lt;/center&gt;")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>enemy affs</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  eaffs = Geyser.Label:new({
   name = "eaffs",
   x = "35%", y = "30%",
   width = "65%", height = "23%",
   color = "dark_slate_gray", fgColor = "white",
   message = [[&lt;center&gt;enemy affs&lt;/center&gt;]],
  }, leftContainer);
  eaffs:setFontSize(9)
  eaffs:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: DarkSlateBlue;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>toggles</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  toggles = Geyser.MiniConsole:new({
   name = "toggles",
   x = 0, y = "53%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles]],
  }, leftContainer);
  toggles:setFontSize(9)
  toggles:clear()
  toggles:cecho("\nattacking")
  toggles:echo("\nbashing")
  toggles:echo("\nfasthunt")
  toggles:echo("\nquesting")
  toggles:echo("\ndispersing")

  --toggles:echo("attacking\n&lt;center&gt;&lt;/center&gt;bashing\n&lt;center&gt;&lt;/center&gt;fasthunt")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>toggles2</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  toggles2 = Geyser.MiniConsole:new({
   name = "toggles2",
   x = "50%", y = "53%",
   width = "50%", height = "10%",
   color = "black", fgColor = "white",
   message = [[toggles2]],
  }, leftContainer);
  toggles2:setFontSize(9)
  toggles2:clear()
  toggles2:cecho("\naffcalling")
  toggles2:echo("\ncalling")
  toggles2:echo("\nlistening")
  toggles2:echo("\nchameleon")
  --toggles2:echo("affcalling\n&lt;center&gt;&lt;/center&gt;calling\n&lt;center&gt;&lt;/center&gt;listening")
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>monolith</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  monolith = Geyser.Label:new({
   name = "monolith",
   x = 0, y = "62%",
   width = "100%", height = "2%",
   color = "firebrick", fgColor = "black",
  }, leftContainer);
  monolith:setFontSize(12)
  monolith:echo("&lt;center&gt;monolith&lt;/center&gt;")
end

function colorMonolithLabel()
    if snd.monolith then
      monolith:setColor("medium_sea_green")
    else
      monolith:setColor("firebrick")
    end
end
registerAnonymousEventHandler("sunder_item_update", "colorMonolithLabel")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>exits</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  exits = Geyser.Label:new({
   name = "exits",
   x = 0, y = "64%",
   width = "100%", height = "2%",
   color = "midnight_blue", fgColor = "white",
   message = [[exits]],
  }, leftContainer);
end

function snd.update_exits()
  if snd.gui.enabled then
    if #snd.my.room_exits &gt;= 1 then
      exits:echo("&lt;center&gt;" .. table.concat(snd.my.room_exits, ", ") .. "&lt;/center&gt;")
    else
      exits:echo("&lt;center&gt;no exits&lt;/center")
    end
  end
end
registerAnonymousEventHandler("sunder_room_updated", "snd.update_exits")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>enorian in room</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  enorian_people = Geyser.Label:new({
   name = "enorian_people",
   x = 0, y = "66.5%",
   width = "51%", height = "17%",
   color = "SlateGray", fgColor = "DeepSkyBlue",
   message = [[&lt;center&gt;Enorian&lt;\center&gt;]],
  }, leftContainer);
      enorian_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>duiran in room</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  duiran_people = Geyser.Label:new({
   name = "duiran_people",
   x = 0, y = "83%",
   width = "51%", height = "17%",
   color = "SlateGray", fgColor = "DeepSkyBlue",
   message = [[&lt;center&gt;Duiran&lt;\center&gt;]],
  }, leftContainer);
      duiran_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>spines in room</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  spines_people = Geyser.Label:new({
   name = "spines_people",
   x = "-51%", y = "66.5%",
   width = "51%", height = "17%",
   color = "SlateGray", fgColor = "tomato",
   message = [[&lt;center&gt;Spines&lt;\center&gt;]],
  }, leftContainer);
        spines_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>bloodloch in room</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
  bloodloch_people = Geyser.Label:new({
   name = "bloodloch_people",
   x = "-51%", y = "83%",
   width = "51%", height = "17%",
   color = "SlateGray", fgColor = "tomato",
   message = [[&lt;center&gt;Bloodloch&lt;\center&gt;]],
  }, leftContainer);
        bloodloch_people:setStyleSheet([[
  border-width: 3px;
  border-style: solid;
  border-color: SlateGray;
  ]])
end</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Coloring these things</name>
					<packageName></packageName>
					<script>if snd.gui.enabled then
snd.display = {
--Begin self 
--locking affs
self_paralysis = "P",
self_paralysis_color = "",
self_asthma = "A",
self_asthma_color = "",
self_slickness = "S",
self_slickness_color = "",
self_anorexia = "N",
self_anorexia_color = "",
--prone/pseudo prone
self_prone = "prone",
self_prone_color = "",
--limb damage
self_head = "0",
self_head_color = "",
self_leftleg = "/",
self_leftleg_color = "",
self_rightleg = "\\",
self_rightleg_color = "",
self_leftarm = "/",
self_leftarm_color = "",
self_rightarm = "\\",
self_rightarm_color = "",
self_torso = "|",
self_torso_color = "",


--Begin enemy
--locking affs
enemy_paralysis = "P",
enemy_paralysis_color = "",
enemy_asthma = "A",
enemy_asthma_color = "",
enemy_slickness = "S",
enemy_slickness_color = "",
enemy_anorexia = "N",
enemy_anorexia_color = "",
--prone/pseudo prone
enemy_prone = "prone",
enemy_prone_color = "",
--limb damage
enemy_head = "0",
enemy_head_color = "",
enemy_leftleg = "/",
enemy_leftleg_color = "",
enemy_rightleg = "\\",
enemy_rightleg_color = "",
enemy_leftarm = "/",
enemy_leftarm_color = "",
enemy_rightarm = "\\",
enemy_rightarm_color = "",
enemy_torso = "|",
enemy_torso_color = "",
}
end

function color_self_affs()
if snd.have_aff("paralysis") then 
	snd.display.self_paralysis_color = "red" 
elseif snd.have_aff("paresis") then 
	snd.display.self_paralysis_color = "yellow" 
else
	snd.display.self_paralysis_color = "white"
end

if snd.have_aff("asthma") then 
	snd.display.self_asthma_color = "red" 
else
	snd.display.self_asthma_color = "white"
end

if snd.have_aff("slickness") then 
	snd.display.self_slickness_color = "red" 
else
	snd.display.self_slickness_color = "white"
end

if snd.have_aff("anorexia") then 
	snd.display.self_anorexia_color = "red" 
else
	snd.display.self_anorexia_color = "white"
end

if gmcp.Char.Vitals.fallen == "1" then 
	snd.display.self_prone_color = "red" 
elseif gmcp.Char.Vitals.prone == "1" then
	snd.display.self_prone_color = "yellow" 
else
	snd.display.self_prone_color = "white"
end

mystatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_paralysis_color.."\"&gt;"..snd.display.self_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_asthma_color.."\"&gt;"..snd.display.self_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_slickness_color.."\"&gt;"..snd.display.self_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.self_anorexia_color.."\"&gt;"..snd.display.self_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.self_prone_color.."\"&gt;"..snd.display.self_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end

function color_enemy_affs()
if snd.checkAff("paralysis") then 
	snd.display.enemy_paralysis_color = "red" 
elseif snd.checkAff("paresis") then 
	snd.display.enemy_paralysis_color = "yellow" 
else
	snd.display.enemy_paralysis_color = "white"
end

if snd.checkAff("asthma") then 
	snd.display.enemy_asthma_color = "red" 
else
	snd.display.enemy_asthma_color = "white"
end

if snd.checkAff("slickness") then 
	snd.display.enemy_slickness_color = "red" 
else
	snd.display.enemy_slickness_color = "white"
end

if snd.checkAff("anorexia") then 
	snd.display.enemy_anorexia_color = "red" 
else
	snd.display.enemy_anorexia_color = "white"
end

local pseudo_check = false
for _, v in ipairs(snd.entangleaffs) do
	if snd.checkAff(v) then
		pseudo_check = true
		break
	end
end

if snd.checkAff("fallen") then 
	snd.display.enemy_prone_color = "red" 
elseif pseudo_check then
	snd.display.enemy_prone_color = "yellow" 
else
	snd.display.enemy_prone_color = "white"
end


estatus:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_paralysis_color.."\"&gt;"..snd.display.enemy_paralysis.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_asthma_color.."\"&gt;"..snd.display.enemy_asthma.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_slickness_color.."\"&gt;"..snd.display.enemy_slickness.."&lt;/span&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_anorexia_color.."\"&gt;"..snd.display.enemy_anorexia.."&lt;/span&gt;"..
												"&lt;/center&gt;&lt;center&gt;"..
												"&lt;span style=\"color:"..snd.display.enemy_prone_color.."\"&gt;"..snd.display.enemy_prone.."&lt;/span&gt;".."&lt;/center&gt;")
												
end
registerAnonymousEventHandler("sunder_enemy_affs_updated", "color_enemy_affs")

function color_enemy_limbs()

--consider using different symbols for the bruising levels
if snd.limb_status["head"] == "mangled" then 
	snd.display.enemy_head_color = "red" 
elseif snd.limb_status["head"] == "broken" then 
	snd.display.enemy_head_color = "gold" 
else
	snd.display.enemy_head_color = "white"
end

if snd.limb_status["left leg"] == "mangled" then 
	snd.display.enemy_leftleg_color = "red" 
elseif snd.limb_status["left leg"] == "broken" then 
	snd.display.enemy_leftleg_color = "gold" 
elseif snd.checkAff("left_leg_crippled") then
	snd.display.enemy_leftleg_color = "green" 
else
	snd.display.enemy_leftleg_color = "white"
end

if snd.limb_status["right leg"] == "mangled" then 
	snd.display.enemy_rightleg_color = "red" 
elseif snd.limb_status["right leg"] == "broken" then 
	snd.display.enemy_rightleg_color = "gold" 
elseif snd.checkAff("right_leg_crippled") then
	snd.display.enemy_rightleg_color = "green" 
else
	snd.display.enemy_rightleg_color = "white"
end

if snd.limb_status["left arm"] == "mangled" then 
	snd.display.enemy_leftarm_color = "red" 
elseif snd.limb_status["left arm"] == "broken" then 
	snd.display.enemy_leftarm_color = "gold" 
elseif snd.checkAff("left_arm_crippled") then
	snd.display.enemy_leftarm_color = "green" 
else
	snd.display.enemy_leftarm_color = "white"
end

if snd.limb_status["right arm"] == "mangled" then 
	snd.display.enemy_rightarm_color = "red" 
elseif snd.limb_status["right arm"] == "broken" then 
	snd.display.enemy_rightarm_color = "gold" 
elseif snd.checkAff("right_arm_crippled") then
	snd.display.enemy_rightarm_color = "green" 
else
	snd.display.enemy_rightarm_color = "white"
end

if snd.limb_status["torso"] == "mangled" then 
	snd.display.enemy_torso_color = "red" 
elseif snd.limb_status["torso"] == "broken" then 
	snd.display.enemy_torso_color = "gold" 
else
	snd.display.enemy_torso_color = "white"
end 
elimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_head_color.."\"&gt;"..snd.display.enemy_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftarm_color.."\"&gt;"..snd.display.enemy_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_torso_color.."\"&gt;"..snd.display.enemy_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightarm_color.."\"&gt;"..snd.display.enemy_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.enemy_leftleg_color.."\"&gt;"..snd.display.enemy_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.enemy_rightleg_color.."\"&gt;"..snd.display.enemy_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
				)
end

registerAnonymousEventHandler("sunder_enemy_limbs_updated","color_enemy_limbs")

function color_self_limbs()

--consider using different symbols for the bruising levels
if snd.afflictions.aff_torso_mangled.state == "afflicted" then 
	snd.display.self_torso_color = "red" 
elseif snd.afflictions.aff_torso_broken.state == "afflicted" then 
	snd.display.self_torso_color = "gold" 
else
  snd.display.self_torso_color = "white"
end

if snd.afflictions.aff_left_leg_mangled.state == "afflicted" then 
	snd.display.self_leftleg_color = "red" 
elseif snd.afflictions.aff_left_leg_broken.state == "afflicted" then 
	snd.display.self_leftleg_color = "gold" 
elseif snd.afflictions.aff_left_leg_crippled.state == "afflicted" then
	snd.display.self_leftleg_color = "green" 
else
	snd.display.self_leftleg_color = "white"
end

if snd.afflictions.aff_right_leg_mangled.state == "afflicted" then 
	snd.display.self_rightleg_color = "red" 
elseif snd.afflictions.aff_right_leg_broken.state == "afflicted" then 
	snd.display.self_rightleg_color = "gold" 
elseif snd.afflictions.aff_right_leg_crippled.state == "afflicted" then
	snd.display.self_rightleg_color = "green" 
else
	snd.display.self_rightleg_color = "white"
end

if snd.afflictions.aff_left_arm_mangled.state == "afflicted" then 
	snd.display.self_leftarm_color = "red" 
elseif snd.afflictions.aff_left_arm_broken.state == "afflicted" then 
	snd.display.self_leftarm_color = "gold" 
elseif snd.afflictions.aff_left_arm_crippled.state == "afflicted" then
	snd.display.self_leftarm_color = "green" 
else
	snd.display.self_leftarm_color = "white"
end

if snd.afflictions.aff_right_arm_mangled.state == "afflicted" then 
	snd.display.self_rightarm_color = "red" 
elseif snd.afflictions.aff_right_arm_broken.state == "afflicted" then 
	snd.display.self_rightarm_color = "gold" 
elseif snd.afflictions.aff_right_arm_crippled.state == "afflicted" then
	snd.display.self_rightarm_color = "green" 
else
	snd.display.self_rightarm_color = "white"
end

if snd.afflictions.aff_head_mangled.state == "afflicted" then 
	snd.display.self_head_color = "red" 
elseif snd.afflictions.aff_head_broken.state == "afflicted" then 
	snd.display.self_head_color = "gold" 
else
	snd.display.self_head_color = "white"
end

mylimbs:echo("&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_head_color.."\"&gt;"..snd.display.self_head.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftarm_color.."\"&gt;"..snd.display.self_leftarm.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_torso_color.."\"&gt;"..snd.display.self_torso.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightarm_color.."\"&gt;"..snd.display.self_rightarm.."&lt;/span&gt;".."&lt;/center&gt;"..
						"&lt;center&gt;".."&lt;span style=\"color:"..snd.display.self_leftleg_color.."\"&gt;"..snd.display.self_leftleg.."&lt;/span&gt;"..
						"&lt;span style=\"color:"..snd.display.self_rightleg_color.."\"&gt;"..snd.display.self_rightleg.."&lt;/span&gt;".."&lt;/center&gt;"	
				)
end
registerAnonymousEventHandler("sunder_my_limbs_updated","color_self_limbs")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Aff displays</name>
					<packageName></packageName>
					<script>function display_my_affs()
	
	local self_display_table = {}
	local tally_check = snd.aff_tally()
	local aff_check = ""
  if tally_check &gt; 0 then
		for aff in pairs(snd.afflictions) do
  		if snd.have_aff(aff) then
				aff_check = aff
				aff_check = aff_check:gsub("aff_", "")
				aff_check = aff_check:gsub("_", " ")
				aff_check = aff_check:gsub("left", "L")
				aff_check = aff_check:gsub("right", "R")
				if snd.afflictions[aff]["cures"]["herb"] ~= nil or 
        snd.afflictions[aff]["cures"]["salve"] ~= nil or 
        snd.afflictions[aff]["cures"]["smoke"] ~= nil then
     			table.insert(self_display_table, "&lt;center&gt;"..aff_check.."&lt;/center&gt;")
				end
			end
		end

    myaffs:echo(table.concat(self_display_table))
  else
 		myaffs:echo("&lt;center&gt;my affs&lt;/center&gt;")
	end
	color_self_affs()
end

registerAnonymousEventHandler("sunder_my_affs_updated", "display_my_affs")

function display_enemy_affs()
  target_display_table = {}
  if #snd.target_has &gt;= 1 then
    for _, v in ipairs(snd.target_has) do
      if v:find("crippled") then
        v = v:gsub("a ", "")
        v = v:gsub("left", "L")
        v = v:gsub("right", "R")
      end
      table.insert(target_display_table, "&lt;center&gt;" .. v .. "&lt;/center&gt;")
    end
    eaffs:echo(table.concat(target_display_table))
    --color_enemy_affs()
    color_enemy_limbs()
  else
    eaffs:echo("&lt;center&gt;enemy affs&lt;/center&gt;")
  end
end

registerAnonymousEventHandler("sunder_enemy_affs_updated", "display_enemy_affs")</script>
					<eventHandlerList />
				</Script>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Right</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external Scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>map window</name>
					<packageName></packageName>
					<script> if snd.gui.enabled then
  mapper = Geyser.Mapper:new({
  name = "mapper",
  x = 0, y = 0,
  width = "100%", height = "100%",
  }, mapContainer);
end</script>
					<eventHandlerList />
				</Script>
				<ScriptGroup isActive="yes" isFolder="yes">
					<name>Chat</name>
					<packageName></packageName>
					<script></script>
					<eventHandlerList />
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>YATCOCONFIG</name>
						<packageName></packageName>
						<script>demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.config = demonnic.chat.config or {}
</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Configuration Options</name>
							<packageName></packageName>
							<script>--[[
This is where all of the configuration options can be set. 
Anything I've put in this script object can be changed, but please do pay attention to what you're doing.
If you change one of the values to something it shouldn't be, you could break it. 
]]

--This is where you tell it to use tabbed chat.
  demonnic.chat.use = true
--[[
This is where you put what container to put the tabbed chat stuff into. Make it
equal to the actual container object you want it in, or false for none. Defaults to false
Which is to say if you want to put the tabbed chat stuff into a container made using 
uiRight = Geyser.Container:new()

you would put

demonnic.chat.useContainer = uiRight

and if you don't want it in a container you would put

demonnic.chat.useContainer = false
]]

demonnic.chat.useContainer = yatcoContainer

--[[
The timestamp option is set here.
Set to false if you do not want any timestamps displayed for chat.
If you do want it displayed, set to the string for the format you wish. 
see http://wiki.mudlet.org/w/Manual:Lua_Functions#getTime for information
how to format the string
]]
--demonnic.chat.config.timestamp = "HH:mm:ss"
demonnic.chat.config.timestamp = false

--[[ Should we use our own colors for the timestamp?
Set to true if you want to specify foreground and background colors
for the timestamp.
Set to false if you want the timestamps background and foreground
colors to match that of the mud output.
]]
demonnic.chat.config.timestampCustomColor = false
--[[
and what foreground color? You can either use one of the 'named' colors
(see http://wiki.mudlet.org/images/c/c3/ShowColors.png for available colors)
demonnic.chat.config.timestampFG = "slate_grey"

Or you can use a table of R,G,B values. 
demonnic.chat.config.timestampFG = {
  255,
    0,
    0,
}
then the foreground for the timestamp would be 255 read, 100 green, and 0 blue
]]
demonnic.chat.config.timestampFG = "red"

--and background? Same rules as for the foreground above
demonnic.chat.config.timestampBG = "blue"

--[[
This is where you say what corner of the screen you want the tabbed chat on
Valid settings are "topright", "topleft", "bottomright", "bottomleft"
]]--
demonnic.chat.config.location = "topright"

--[[
This is a table of channels you would like.
AKA the place you tell the script what tabs you want.
Each entry must be a string. The defaults should be a pretty effective guide.
]]

demonnic.chat.config.channels = {
  "All",
	"Tells",
	"Local",
	"Web",
  "City",
  "Guild",
  "Clans",
	"Order",
  "Misc",
}


--Set this to the name of the channel you want to have everything sent to. 
--Per the default, this would be the "All" channel. If you have a different name for it:
--
--demonnic.chat.config.Alltab = "Bucket"  
--
--And if you don't want it turned on at all:
--
--demonnic.chat.config.Alltab = false

demonnic.chat.config.Alltab = "All"

--Set this to the name of the channel you want to display your map. Set to "" if you
--don't want to display the map in your YATCO tabs
demonnic.chat.config.Maptab = ""


---------------------------------------------------------------------------------
--                                                                             --
--The infamous blinking stuff!!!                                               --
--                                                                             --
---------------------------------------------------------------------------------

--[[
Do you want tabs to blink when you get new messages, until you click on the tab?
True if yes, false if no.
]]
demonnic.chat.config.blink = true

--How long (in seconds) between blinks? For example, 1 would mean a 1 second pause in between blinks.
demonnic.chat.config.blinkTime = 3

--Blink if the bucket tab ("All" by default, but configured above) is in focus?
demonnic.chat.config.blinkFromAll = false




--Font size for the chat messages

demonnic.chat.config.fontSize = 9

--[[
Should we preserve the formatting of the text. 
Or should we set the background of it to match the window color?
Set this to false if you want the background for all chat to match the background of the window.
Useful if you change the background from black, and don't like the way the pasted chat makes blocks in it
]]

demonnic.chat.config.preserveBackground = false

--[[
Gag the chat lines in the main window?
defaults to false, set to true if you want to gag.
]]

demonnic.chat.config.gag = false

--[[
Number of lines of chat visible at once. 
Will determine how tall the window for the chats is.
]]

local x, y = getMainWindowSize()
demonnic.chat.config.lines = (((y/2) / 17) - 4)

--[[
Number of characters to wrap the chatlines at.
This will also determine how wide the chat windows are.
]]

demonnic.chat.config.width = 55

--[[
Set the color for the active tab. R,G,B format.
The default here is a brightish green
]]

demonnic.chat.config.activeColors = {
  r = 0,
  g = 180,
  b = 0,
}

--[[
Set the color for the inactive tab. R,G,B format.
The default here is a drab grey
]]

demonnic.chat.config.inactiveColors = {
  r = 60,
  g = 60,
  b = 60,
}

--[[
Set the color for the chat window itself. R,G,B format.
Defaulted to the black of my twisted hardened soul. Or something.
]]

demonnic.chat.config.windowColors = {
  r = 0,
  g = 0,
  b = 0,
}

--[[
Set the color for the text on the active tab. Uses color names.
Set the default to purple. So the tab you're looking at, by default will be purple on bright green. 
Did I mention I'm a bit colorblind?
]]

demonnic.chat.config.activeTabText = "purple"

--[[
Set the color for the text on the inactive tabs. Uses color names.
Defaulted this to white. So the tabs you're not looking at will be white text on boring grey background.
]]

demonnic.chat.config.inactiveTabText = "white"

--[[
have to make sure a currentTab is set... 
so we'll use the one for the bucket, or the first one in the channels table
Or, you know... what it's currently set to, if it's already set.
]]
demonnic.chat.currentTab = demonnic.chat.currentTab or demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Shared</name>
						<packageName></packageName>
						<script>--Bootstrapping variables/etc. Don't touch this unless you really know what you're doing

--I mean it. I'll point. AND laugh. loudly. 
demonnic = demonnic or {}
demonnic.config = demonnic.config or {}
demonnic.balances = demonnic.balances or {}
demonnic.balances.balance = demonnic.balances.balance or 1
demonnic.balances.equilibrium = demonnic.balances.equilibrium or 1
demonnic.debug = demonnic.debug or {}
demonnic.debug.active = demonnic.debug.active or nil
demonnic.debug.categories = demonnic.debug.categories or { }


function demonnic:echo(msg)
 cecho(string.format("\n&lt;blue&gt;(&lt;green&gt;Demonnic&lt;blue&gt;):&lt;white&gt; %s", msg))
end</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Debugging</name>
							<packageName></packageName>
							<script>--Adds debugging functionality 

function demonnic:Debug(category,debugData)
   if category then
      if table.contains(demonnic.debug.categories, category) then
         if type(debugData) == "table" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt;")
            display(debugData)
         elseif type(debugData) == "string" or type(debugData) == "number" then
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. debugData .. "\n" )
         else
            demonnic:echo("&lt;red&gt;DEBUG " .. category .. ":&lt;white&gt; " .. tostring(debugData) .. "\n" )
         end
      end
   else
      if type(debugData) == "table" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt;")
         display(debugData)
      elseif type(debugData) == "string" or type(debugData) == "number" then
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. debugData)
      else
         demonnic:echo("&lt;red&gt;DEBUG:&lt;white&gt; " .. tostring(debugData))
      end
   end
end

function demonnic:printDebug(category, debugData)
   if not demonnic.debug.active then return end
   demonnic:Debug(category, debugData)
end

function demonnic:toggleDebug()
   if demonnic.debug.active then demonnic.debug.active = nil
   else demonnic.debug.active = true
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:watchCategory( category )
   if table.contains(demonnic.debug.categories, category) then
      for i,v in ipairs(demonnic.debug.categories) do
         if v == category then
            table.remove(demonnic.debug.categories, i)
         end
      end
      demonnic:echo("No longer watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.") 
   else
      table.insert(demonnic.debug.categories, category)
      demonnic:echo("Now watching the '&lt;red&gt;"..category.."&lt;white&gt;' category.")
   end
   demonnic:echo("Debugging is currently " .. (( demonnic.debug.active and "&lt;green&gt;ON&lt;white&gt;") or "&lt;red&gt;OFF&lt;white&gt;"))
end

function demonnic:listCategories()
   if #demonnic.debug.categories &gt; 0 then
      demonnic:echo("You are currently watching the following categories:\n" .. table.concat(demonnic.debug.categories,", ") )
   else
      demonnic:echo("You are not watching any debugs.")
   end
end
</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>Geyser Additions</name>
							<packageName></packageName>
							<script>function Geyser.MiniConsole:clear()
   clearWindow(self.name)
end

function Geyser.MiniConsole:append()
  appendBuffer(self.name)
end</script>
							<eventHandlerList />
						</Script>
					</ScriptGroup>
					<ScriptGroup isActive="yes" isFolder="yes">
						<name>Tabbed Chat</name>
						<packageName></packageName>
						<script>--Do not remove the following lines. Or change them.
demonnic = demonnic or {}
demonnic.chat = demonnic.chat or {}
demonnic.chat.tabsToBlink = demonnic.chat.tabsToBlink or {}
demonnic.chat.tabs = demonnic.chat.tabs or {}
demonnic.chat.windows = demonnic.chat.windows or {}
if not demonnic.chat.config then
  cecho("&lt;red:white&gt;YOU DO NOT HAVE THE YATCO CONFIG PACKAGE IN PLACE. THINGS WILL NOT WORK AS EXPECTED\n\n")
  demonnic.chat.error = "NO CONFIG"
end</script>
						<eventHandlerList />
						<Script isActive="yes" isFolder="no">
							<name>Code</name>
							<packageName></packageName>
							<script>--[[
If the label callbacks ever decide to start taking a function which is part of a table, 0then this will change.
Or if it's modified to take actual functions. Anonymouse function clickcallback would be awfully nice.
]]

function demonnicChatSwitch(chat)
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local newr = demonnic.chat.config.activeColors.r
  local newg = demonnic.chat.config.activeColors.g
  local newb = demonnic.chat.config.activeColors.b
  local oldchat = demonnic.chat.currentTab
  if demonnic.chat.currentTab ~= chat then
    demonnic.chat.windows[oldchat]:hide()
    demonnic.chat.tabs[oldchat]:setColor(r,g,b)
    demonnic.chat.tabs[oldchat]:echo(oldchat, demonnic.chat.config.inactiveTabText, "c")
    if demonnic.chat.config.blink and demonnic.chat.tabsToBlink[chat] then
      demonnic.chat.tabsToBlink[chat] = nil
    end
    if demonnic.chat.config.blink and chat == demonnic.chat.config.Alltab then
      demonnic.chat.tabsToBlink = {}
    end
  end
  demonnic.chat.tabs[chat]:setColor(newr,newg,newb)
  demonnic.chat.tabs[chat]:echo(chat, demonnic.chat.config.activeTabText, "c")
  demonnic.chat.windows[chat]:show()
  demonnic.chat.currentTab = chat  
end

function demonnic.chat:resetUI()
  demonnic.chat.container = demonnic.chat.useContainer or Geyser.Container:new(demonnic.chat[demonnic.chat.config.location]())
  demonnic.chat.tabBox = Geyser.HBox:new({
    x=0,
    y=0,
    width = "100%",
    height = "25px",
    name = "DemonChatTabs",
    autoWrap = true,
  },demonnic.chat.container)

end

function demonnic.chat:create()
  --reset the UI
  demonnic.chat:resetUI()
  --Set some variables locally to increase readability
  local r = demonnic.chat.config.inactiveColors.r
  local g = demonnic.chat.config.inactiveColors.g
  local b = demonnic.chat.config.inactiveColors.b
  local winr = demonnic.chat.config.windowColors.r
  local wing = demonnic.chat.config.windowColors.g
  local winb = demonnic.chat.config.windowColors.b

  --iterate the table of channels and create some windows and tabs
  for i,tab in ipairs(demonnic.chat.config.channels) do
    demonnic.chat.tabs[tab] = Geyser.Label:new({
      name=string.format("tab%s", tab),
    }, demonnic.chat.tabBox)
    demonnic.chat.tabs[tab]:echo(tab, demonnic.chat.config.inactiveTabText, "c")
    demonnic.chat.tabs[tab]:setColor(r,g,b)
    demonnic.chat.tabs[tab]:setClickCallback("demonnicChatSwitch", tab)
    demonnic.chat.windows[tab] = Geyser.MiniConsole:new({
--      fontSize = demonnic.chat.config.fontSize,
      x = 0,
      y = 25,
      height = "96%",
      width = "100%",
      autoWrap = true,
      name = string.format("win%s", tab),
    }, demonnic.chat.container)
    demonnic.chat.windows[tab]:setFontSize(demonnic.chat.config.fontSize)
    demonnic.chat.windows[tab]:setColor(winr,wing,winb)
    demonnic.chat.windows[tab]:setWrap(demonnic.chat.config.width)
    demonnic.chat.windows[tab]:hide()
  end
  if demonnic.chat.config.Maptab and demonnic.chat.config.Maptab ~= "" then
    demonnic.chat.mapWindow = Geyser.Mapper:new({
      x = 15,
      y = 0,
      height = "100%",
      width = "100%",
    }, demonnic.chat.windows[demonnic.chat.config.Maptab])
    demonnic.chat.windows[demonnic.chat.config.Maptab]:hide()
  end
  local showme = demonnic.chat.config.Alltab or demonnic.chat.config.channels[1]
  demonnicChatSwitch(showme)
  --start the blink timers, if enabled
  if demonnic.chat.config.blink and not demonnic.chat.blinkTimerOn then
    demonnic.chat:blink()
  end
end

function demonnic.chat:append(chat)

  local r = demonnic.chat.config.windowColors.r
  local g = demonnic.chat.config.windowColors.g
  local b = demonnic.chat.config.windowColors.b
  selectCurrentLine()
  local ofr,ofg,ofb = getFgColor()
  local obr,obg,obb = getBgColor()
  if demonnic.chat.config.preserveBackground then
    setBgColor(r,g,b)
  end
  copy()
  if demonnic.chat.config.timestamp then
    local timestamp = getTime(true, demonnic.chat.config.timestamp)
    local tsfg = {}
    local tsbg = {}
    local colorLeader = ""
    if demonnic.chat.config.timestampCustomColor then
      if type(demonnic.chat.config.timestampFG) == "string" then
        tsfg = color_table[demonnic.chat.config.timestampFG]
      else
        tsfg = demonnic.chat.config.timestampFG
      end
      if type(demonnic.chat.config.timestampBG) == "string" then
        tsbg = color_table[demonnic.chat.config.timestampBG]
      else
        tsbg = demonnic.chat.config.timestampBG
      end
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",tsfg[1],tsfg[2],tsfg[3],tsbg[1],tsbg[2],tsbg[3])
    else
      colorLeader = string.format("&lt;%s,%s,%s:%s,%s,%s&gt;",ofr,ofg,ofb,obr,obg,obb)
    end
    local fullstamp = string.format("%s%s",colorLeader,timestamp)
      demonnic.chat.windows[chat]:decho(fullstamp)
      demonnic.chat.windows[chat]:echo(" ")
      if demonnic.chat.config.Alltab then 
        demonnic.chat.windows[demonnic.chat.config.Alltab]:decho(fullstamp)
        demonnic.chat.windows[demonnic.chat.config.Alltab]:echo(" ")
      end
  end
  demonnic.chat.windows[chat]:append()
  if demonnic.chat.config.gag then 
    deleteLine() 
    tempLineTrigger(1,1, [[if isPrompt() then deleteLine() end]])
  end
  if demonnic.chat.config.Alltab then appendBuffer(string.format("win%s", demonnic.chat.config.Alltab)) end
  if demonnic.chat.config.blink and chat ~= demonnic.chat.currentTab then 
    if (demonnic.chat.config.Alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end



function demonnic.chat:blink()
  if demonnic.chat.blinkID then killTimer(demonnic.chat.blinkID) end
  if not demonnic.chat.config.blink then 
    demonnic.chat.blinkTimerOn = false
    return 
  end
  if not demonnic.chat.container.hidden then
    for tab,_ in pairs(demonnic.chat.tabsToBlink) do
      demonnic.chat.tabs[tab]:flash()
    end
  end
  demonnic.chat.blinkID = tempTimer(demonnic.chat.config.blinkTime, function () demonnic.chat:blink() end)
end

function demonnic.chat:topright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=0,
    width= "-1px",
    height=string.format("%ic", demonnic.chat.config.lines),
  }
end

function demonnic.chat:topleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=0,
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomright()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=string.format("-%sc",demonnic.chat.config.width + 2),
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width="-15px",
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end

function demonnic.chat:bottomleft()
  return {
    fontSize = demonnic.chat.config.fontSize,
    x=0,
    y=string.format("-%sc",demonnic.chat.config.lines + 2),
    width=string.format("%sc",demonnic.chat.config.width),
    height=string.format("%ic", demonnic.chat.config.lines + 2),
  }
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>demonnicOnStart</name>
							<packageName></packageName>
							<script>function demonnicOnStart()
  if demonnic.chat.use and snd.gui.enabled then
    demonnic.chat:create()
  end
end</script>
							<eventHandlerList>
								<string>sysLoadEvent</string>
							</eventHandlerList>
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>echo functions</name>
							<packageName></packageName>
							<script>
function demonnic.chat:cecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  cecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    cecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:decho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  decho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    decho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:hecho(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  hecho(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    hecho(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end

function demonnic.chat:echo(chat, message)
  local alltab = demonnic.chat.config.Alltab
  local blink = demonnic.chat.config.blink
  echo(string.format("win%s",chat), message)
  if alltab and chat ~= alltab then 
    echo(string.format("win%s", alltab), message)
  end
  if blink and chat ~= demonnic.chat.currentTab then
    if (alltab == demonnic.chat.currentTab) and not demonnic.chat.config.blinkOnAll then
      return
    else
      demonnic.chat.tabsToBlink[chat] = true
    end
  end
end</script>
							<eventHandlerList />
						</Script>
						<Script isActive="yes" isFolder="no">
							<name>demonnicOnInstall</name>
							<packageName></packageName>
							<script>function demonnicOnInstall(_, package)
  if package:find("YATCO") then
  	demonnicOnStart()
  end
end</script>
							<eventHandlerList>
								<string>sysInstall</string>
							</eventHandlerList>
						</Script>
					</ScriptGroup>
				</ScriptGroup>
			</ScriptGroup>
			<ScriptGroup isActive="yes" isFolder="yes">
				<name>Updating functions</name>
				<packageName></packageName>
				<script>-------------------------------------------------
--         Put your Lua functions here.        --
--                                             --
-- Note that you can also use external scripts --
-------------------------------------------------
</script>
				<eventHandlerList />
				<Script isActive="yes" isFolder="no">
					<name>echoing</name>
					<packageName></packageName>
					<script>
function snd.set_vitals()
 local class = snd.assumed_class or gmcp.Char.Status.class
 local string = "&lt;center&gt;"..gmcp.Char.Status.name.."&lt;/center&gt;&lt;center&gt;"..class.."&lt;/center&gt;"
 if snd.gui.enabled then 
  vitals:echo(string)
 end
end
registerAnonymousEventHandler("sunder_update_vitals", "snd.set_vitals")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>Toggles</name>
					<packageName></packageName>
					<script>function snd.updateToggles()

  toggles:clear()
  toggles2:clear()
  
  local tgs = {"attacking", "bashing", "fasthunt", "questing",  "dispersing"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      if tgs[tog] == "dispersing" then
        if snd.disperse == "callers" then
    			toggles:cecho("\n&lt;yellow&gt;dispersing")
    		elseif snd.disperse == "all" then
    			toggles:cecho("\n&lt;green&gt;dispersing")
        else
          toggles:cecho("\n&lt;red&gt;dispersing")
        end
      else
        toggles:cecho("\n&lt;green&gt;" .. tgs[tog])
      end
    else
      toggles:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
  
  tgs = {"affcalling", "calling", "listening", "chameleon"}
  
  for tog in pairs(tgs) do
    if snd.toggles[tgs[tog]] then
      toggles2:cecho("\n&lt;green&gt;" .. tgs[tog])
    else
      toggles2:cecho("\n&lt;red&gt;" .. tgs[tog])
    end
  end
end

registerAnonymousEventHandler("sunder_update_toggles", "snd.updateToggles")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>updating the boxes for people in room</name>
					<packageName></packageName>
					<script>people_update =
  function()
    enorian_people:clear()
    duiran_people:clear()
    spines_people:clear()
    bloodloch_people:clear()
    snd.shadow_targets = {}
    snd.spirit_targets = {}
    local duiran = {}
    local enorian = {}
    local spines = {}
    local bloch = {}
    for name, val in pairs(snd.players_here) do
      local city = sndNDB_getCitizenship(val)
      if city == "Enorian" then
        table.insert(enorian, val)
      elseif city == "Duiran" then
          table.insert(duiran, val)
      elseif city == "Spinesreach" then
          table.insert(spines, val)
      elseif city == "Bloodloch" then
          table.insert(bloch, val)
      end
    end

    

  if snd.gui.enabled then
    local colors = {["Enorian"] = "bright_cyan", ["Duiran"] = "a_green", ["Spinesreach"] = "light_violet", ["Bloodloch"] = ""}
    if sndNDB ~= nil then
      colors = sndNDB.highlighting
    end
  
    if #enorian &gt;= 1 then
      enorian_people:cecho("&lt;"..colors["Enorian"].."&gt;&lt;center&gt;" .. table.concat(enorian, "&lt;br&gt;") .. "&lt;/center&gt;")
    end
    if #duiran &gt;= 1 then
      duiran_people:cecho("&lt;"..colors["Duiran"].."&gt;&lt;center&gt;" .. table.concat(duiran, "&lt;br&gt;") .. "&lt;/center&gt;")
    end
    if #spines &gt;= 1 then
      spines_people:cecho("&lt;"..colors["Spinesreach"].."&gt;&lt;center&gt;" .. table.concat(spines, "&lt;br&gt;") .. "&lt;/center&gt;")
    end
    if #bloch &gt;= 1 then
      bloodloch_people:cecho("&lt;"..colors["Bloodloch"].."&gt;&lt;center&gt;" .. table.concat(bloch, "&lt;br&gt;") .. "&lt;/center&gt;")
    end
  end
end
registerAnonymousEventHandler("sunder_people_update", "people_update")</script>
					<eventHandlerList />
				</Script>
				<Script isActive="yes" isFolder="no">
					<name>gmcp_communication</name>
					<packageName></packageName>
					<script>snd = snd or {}
snd.channel_list =
  {
    ["newbie"] = "Misc",
    ["market"] = "Misc",
    ["web"] = "Web",
    ["ct"] = "City",
    ["cnt"] = "City",
    ["emotes"] = "Local",
    ["gt"] = "Guild",
    ["gts"] = "Guild",
    ["clt"] = "Clans",
    ["tell"] = "Tells",
    ["says"] = "Local",
    ["ot"] = "Order",
    ["cot"] = "Order",
    ["congregation"] = "Order",
  }
snd.channel_ignores = {hints = true}
local mobs_to_ignore =
  {
    "Nysaac",
    "Tayiv",
    "Huemotl",
    "Damari",
    "Jinjin",
    "Micotetotl",
    "Hob",
    "Saaik",
    "Eddan",
    "Gorwin",
    "Trudd",
    "Vladerhelm",
    "Hvan",
    "August",
    "Dale",
    "William",
    "Ocauh",
    "Klaana",
    "Valgar",
  }
local talkerWhitelist = {
  ["a masked man"] = true,
  ["a masked woman"] = true,
  ["a masked person"] = true,
  ["a ghostly figure"] = true,
  ["a pumpkin figure"] = true,
  ["a cloaked figure"] = true,
  ["a nightmarish figure"] = true,
  ["a figure hidden by flames"] = true,
  ["a figure of blinding light"] = true,
  ["a vague silhouette"] = true,
  ["a figure shrouded by steam"] = true,
  ["a figure obscured by vines"] = true,
  ["a figure wrapped in darkness"] = true,
  ["a gravitationally distorted figure"] = true,
}

function gmcp_communication()

--if the text contains this text, don't echo to tabbed chat
  snd.we_saw_a_thot = false
  local talker = gmcp.Comm.Channel.Text.talker
  
  if gmcp.Comm.Channel.Text.channel == "says" or gmcp.Comm.Channel.Text.channel == "emotes" then
    if table.isMember(mobs_to_ignore, talker) then return end
    --You can choose whether you want it to match only names that are in the database (excluding divine)
    --Or if you want it to just match any one word name. Some NPCs might slip through.
    if string.match(talker, "%W") and not talkerWhitelist[talker] and not talker:find("the gloriously%-bearded") then return end
    --[[ if sndNDB.players[talker] == nil then
      if not table.isMember(sndNDB.divine, talker) then 
        return 
      end
    end]]
  end
  snd.who_is_talking = talker or ""
  
  
  local channel = gmcp.Comm.Channel.Text.channel
  if channel:find("clt") then
    channel = "clt"
  end
  snd.last_channel = snd.channel_list[channel] or "Misc"
  
  
  local text = gmcp.Comm.Channel.Text.text
  local rawtext = ansi2string(text)
  text = ansi2decho(text)
  text = text:gsub(string.char(27) .. [[.-]] .. string.char(4), "")
  rawtext = rawtext:gsub(string.char(27) .. [[.-]] .. string.char(4), "")


  --echo(rawtext)
  
  if snd.channel_ignores[channel] then return false end

  
  --NDB highlighting of text
  if sndNDB.highlightNames then
    local format = string.match(text, "&lt;%d+.-&gt;")
    local alreadyHighlighted = {}
    for word in string.gmatch(text, "%a+") do
      if sndNDB_Exists(word) and not table.contains(alreadyHighlighted, word) then
        local color = sndNDB_getColour(word) or "white"
        color =
          "&lt;" ..
          color_table[color][1] ..
          "," ..
          color_table[color][2] ..
          "," ..
          color_table[color][3] ..
          "&gt;"
        text = text:gsub(word, color .. word .. format)
        table.insert(alreadyHighlighted, word)
      end
    end
  end
  
  demonnic.chat:decho(snd.last_channel, text.."\n")
  -- enableTrigger("generic capture")
end</script>
					<eventHandlerList>
						<string>gmcp.Comm.Channel.Start</string>
					</eventHandlerList>
				</Script>
			</ScriptGroup>
		</ScriptGroup>
	</ScriptPackage>
	<KeyPackage />
	<HelpPackage>
		<helpURL></helpURL>
	</HelpPackage>
</MudletPackage>
